/*
 * Copyright (c) 2023  Marco Marini, marco.marini@mmarini.org
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 *    END OF TERMS AND CONDITIONS
 *
 */

package org.mmarini.railways2.swing;

import org.mmarini.railways2.model.StationStatus;
import org.mmarini.railways2.model.Train;
import org.mmarini.railways2.model.geometry.Edge;
import org.mmarini.railways2.model.geometry.EdgeLocation;
import org.mmarini.railways2.model.geometry.Node;
import org.mmarini.railways2.model.routes.*;

import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.util.Comparator;
import java.util.Optional;
import java.util.StringJoiner;

import static java.util.Objects.requireNonNull;

/**
 * Defines the map event generated by mouse interaction in the map
 */
public class MapEvent {
    private final MouseEvent mouseEvent;
    private final Point2D location;
    private final StationStatus stationStatus;
    private EdgeLocation edgeLocation;

    /**
     * Creates the map event
     *
     * @param mouseEvent    the mouse event
     * @param location      the map location
     * @param stationStatus the station status
     */
    public MapEvent(MouseEvent mouseEvent, Point2D location, StationStatus stationStatus) {
        this.mouseEvent = requireNonNull(mouseEvent);
        this.location = requireNonNull(location);
        this.stationStatus = requireNonNull(stationStatus);
    }

    /**
     * Returns the map location
     */
    public Point2D getLocation() {
        return location;
    }

    /**
     * Returns the mouse event
     */
    public MouseEvent getMouseEvent() {
        return mouseEvent;
    }

    /**
     * Returns the nearest edge
     */
    private Edge getNearestEdge() {
        return getNearestEdgeLocation().getDirection().getEdge();
    }

    /**
     * Returns the nearest edge location
     */
    public EdgeLocation getNearestEdgeLocation() {
        if (edgeLocation == null) {
            this.edgeLocation = stationStatus.getStationMap().getNearestLocation(location);
        }
        return edgeLocation;
    }

    /**
     * Returns the nearest route
     *
     * @param maxDistance the maximum distance
     */
    public Optional<Route> getNearestRoute(double maxDistance) {
        return getNearestRouteNode(maxDistance).map(stationStatus::getRoute);
    }

    /**
     * Returns the nearest route node
     *
     * @param maxDistance the maximum distance
     */
    public Optional<Node> getNearestRouteNode(double maxDistance) {
        double maxDistanceSq = maxDistance * maxDistance;
        return stationStatus.getRoutes().stream()
                .filter(route -> route instanceof Signal ||
                        route instanceof Switch ||
                        route instanceof DoubleSlipSwitch)
                .flatMap(route -> route.getNodes().stream())
                .filter(node -> node.getLocation().distanceSq(location) <= maxDistanceSq)
                .min(Comparator.comparingDouble(node -> node.getLocation().distanceSq(location)));
    }

    /**
     * Returns the selected section
     *
     * @param maxDistance the max distance allowed to select
     */
    public Optional<Section> getSelectedSection(double maxDistance) {
        EdgeLocation loc = getNearestEdgeLocation();
        return loc.getLocation().distanceSq(location) <= maxDistance ?
                stationStatus.getSection(loc.getDirection().getEdge()) :
                Optional.empty();
    }

    /**
     * Returns the selected train
     */
    public Optional<Train> getSelectedTrain() {
        return stationStatus.getTrain(getNearestEdge());
    }

    /**
     * Returns the station status
     */
    public StationStatus getStationStatus() {
        return stationStatus;
    }

    @Override
    public String toString() {
        return new StringJoiner(", ", MapEvent.class.getSimpleName() + "[", "]")
                .add("mouseEvent=" + mouseEvent)
                .add("location=" + location)
                .add("stationStatus=" + stationStatus)
                .toString();
    }
}
